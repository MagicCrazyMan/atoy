#version 300 es

#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif

in vec2 v_TexCoord;

uniform sampler2D u_ColorSampler;

// kernel of the gaussian blur
int kernel_width = 9;
int kernel_height = 9;
float kernel[81] = float[](0.000262958656, 0.000876539664, 0.0019722158656, 0.0031555460336000003, 0.0036814698320000003, 0.0031555460336000003, 0.0019722158656, 0.000876539664, 0.000262958656, 0.000876539664, 0.0029218349159999997, 0.006574133966399999, 0.0105186165084, 0.012271717458, 0.0105186165084, 0.006574133966399999, 0.0029218349159999997, 0.000876539664, 0.0019722158656, 0.006574133966399999, 0.01479181358656, 0.02366690660336, 0.0276113869832, 0.02366690660336, 0.01479181358656, 0.006574133966399999, 0.0019722158656, 0.0031555460336000003, 0.0105186165084, 0.02366690660336, 0.03786705834916, 0.0441782282542, 0.03786705834916, 0.02366690660336, 0.0105186165084, 0.0031555460336000003, 0.0036814698320000003, 0.012271717458, 0.0276113869832, 0.0441782282542, 0.051541258729000006, 0.0441782282542, 0.0276113869832, 0.012271717458, 0.0036814698320000003, 0.0031555460336000003, 0.0105186165084, 0.02366690660336, 0.03786705834916, 0.0441782282542, 0.03786705834916, 0.02366690660336, 0.0105186165084, 0.0031555460336000003, 0.0019722158656, 0.006574133966399999, 0.01479181358656, 0.02366690660336, 0.0276113869832, 0.02366690660336, 0.01479181358656, 0.006574133966399999, 0.0019722158656, 0.000876539664, 0.0029218349159999997, 0.006574133966399999, 0.0105186165084, 0.012271717458, 0.0105186165084, 0.006574133966399999, 0.0029218349159999997, 0.000876539664, 0.000262958656, 0.000876539664, 0.0019722158656, 0.0031555460336000003, 0.0036814698320000003, 0.0031555460336000003, 0.0019722158656, 0.000876539664, 0.000262958656);

out vec4 out_Color;

void main() {
    // calculates gussian blur
    vec2 tex_size = 1.0f / vec2(textureSize(u_ColorSampler, 0)); // units per texture pixel size
    vec4 color = vec4(0.0);
    for(int row = 0; row < kernel_height; row++) {
        for(int col = 0; col < kernel_width; col++) {
            int offset_s = row - 4;
            int offset_t = col - 4;
            vec2 tex_coord = vec2(v_TexCoord.s + float(offset_s) * tex_size.s, v_TexCoord.t + float(offset_t) * tex_size.t);
            color += texture(u_ColorSampler, tex_coord) * kernel[row * kernel_width + col];
        }
    }

    out_Color = color;
}